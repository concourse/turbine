// This file was generated by counterfeiter
package fakes

import (
	"sync"
	. "github.com/cloudfoundry-incubator/garden/warden"
)

type FakeProcess struct {
	IDStub        func() uint32
	iDMutex       sync.RWMutex
	iDArgsForCall []struct{}
	iDReturns struct {
		result1 uint32
	}
	WaitStub        func() (int, error)
	waitMutex       sync.RWMutex
	waitArgsForCall []struct{}
	waitReturns struct {
		result1 int
		result2 error
	}
}

func (fake *FakeProcess) ID() uint32 {
	fake.iDMutex.Lock()
	defer fake.iDMutex.Unlock()
	fake.iDArgsForCall = append(fake.iDArgsForCall, struct{}{})
	if fake.IDStub != nil {
		return fake.IDStub()
	} else {
		return fake.iDReturns.result1
	}
}

func (fake *FakeProcess) IDCallCount() int {
	fake.iDMutex.RLock()
	defer fake.iDMutex.RUnlock()
	return len(fake.iDArgsForCall)
}

func (fake *FakeProcess) IDReturns(result1 uint32) {
	fake.iDReturns = struct {
		result1 uint32
	}{result1}
}

func (fake *FakeProcess) Wait() (int, error) {
	fake.waitMutex.Lock()
	defer fake.waitMutex.Unlock()
	fake.waitArgsForCall = append(fake.waitArgsForCall, struct{}{})
	if fake.WaitStub != nil {
		return fake.WaitStub()
	} else {
		return fake.waitReturns.result1, fake.waitReturns.result2
	}
}

func (fake *FakeProcess) WaitCallCount() int {
	fake.waitMutex.RLock()
	defer fake.waitMutex.RUnlock()
	return len(fake.waitArgsForCall)
}

func (fake *FakeProcess) WaitReturns(result1 int, result2 error) {
	fake.waitReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

var _ Process = new(FakeProcess)
