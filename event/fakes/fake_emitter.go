// This file was generated by counterfeiter
package fakes

import (
	"github.com/concourse/turbine/event"
	"sync"
)

type FakeEmitter struct {
	EmitEventStub        func(event.Event)
	emitEventMutex       sync.RWMutex
	emitEventArgsForCall []struct {
		arg1 event.Event
	}
	CloseStub        func()
	closeMutex       sync.RWMutex
	closeArgsForCall []struct{}
}

func (fake *FakeEmitter) EmitEvent(arg1 event.Event) {
	fake.emitEventMutex.Lock()
	defer fake.emitEventMutex.Unlock()
	fake.emitEventArgsForCall = append(fake.emitEventArgsForCall, struct {
		arg1 event.Event
	}{arg1})
	if fake.EmitEventStub != nil {
		fake.EmitEventStub(arg1)
	}
}

func (fake *FakeEmitter) EmitEventCallCount() int {
	fake.emitEventMutex.RLock()
	defer fake.emitEventMutex.RUnlock()
	return len(fake.emitEventArgsForCall)
}

func (fake *FakeEmitter) EmitEventArgsForCall(i int) event.Event {
	fake.emitEventMutex.RLock()
	defer fake.emitEventMutex.RUnlock()
	return fake.emitEventArgsForCall[i].arg1
}

func (fake *FakeEmitter) Close() {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct{}{})
	if fake.CloseStub != nil {
		fake.CloseStub()
	}
}

func (fake *FakeEmitter) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

var _ event.Emitter = new(FakeEmitter)
